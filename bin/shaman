#!/usr/bin/env python2.7

import sys
import os
from os import path
from PyQt4.QtCore import *
from PyQt4.QtGui import *
from PyQt4.QtWebKit import *

bindir     = path.dirname(path.realpath(__file__))
shamanhome = path.realpath(path.join(bindir, '..'))
datatpl    = path.join(shamanhome, 'data/{0!s}.json')
indexfile  = path.join(shamanhome, 'app/index.html')

class Storage(QObject):
    "Mimics HTML5 sessionStorage, localStorage or globalStorage"

    @pyqtSlot(QString, result=str)
    def getItem(self, key):
        datafile = datatpl.format(key)
        print 'get ' + datafile
        if path.isfile(datafile):
            with open(datafile, 'r+') as f:
                return f.read()
        else: return ''

    @pyqtSlot(QString)
    def removeItem(self, key):
        datafile = datatpl.format(key)
        print 'remove ' + datafile
        if path.isfile(datafile): os.remove(datafile)

    @pyqtSlot(QString, QString)
    def setItem(self, key, value):
        datafile = datatpl.format(key)
        print 'set ' + datafile
        with open(datafile, 'w+') as f:
            f.write(str(value))

class WebPage(QWebPage):
    def javaScriptConsoleMessage(self, msg, line, source):
        print '{}:{} => {}'.format(source, line, msg)

app = QApplication(sys.argv)

page = QWebPage()
page.mainFrame().addToJavaScriptWindowObject('shamanStorage', Storage())

web = QWebView()
web.setPage(page)
web.load(QUrl(indexfile))
web.show()

sys.exit(app.exec_())
